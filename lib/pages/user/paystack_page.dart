// import 'dart:async';
// // import 'dart:io';

// import 'package:flutter/cupertino.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter_paystack/flutter_paystack.dart';
// import 'package:http/http.dart' as http;

// // To get started quickly, change this to your heroku deployment of
// // https://github.com/PaystackHQ/sample-charge-card-backend
// // Step 1. Visit https://github.com/PaystackHQ/sample-charge-card-backend
// // Step 2. Click "Deploy to heroku"
// // Step 3. Login with your heroku credentials or create a free heroku account
// // Step 4. Provide your secret key and an email with which to start all test transactions
// // Step 5. Replace {YOUR_BACKEND_URL} below with the url generated by heroku (format https://some-url.herokuapp.com)
// String backendUrl = 'https://spicyguitaracademy.com';
// // Set this to a public key that matches the secret key you supplied while creating the heroku instance
// String paystackPublicKey = 'pk_live_a62de957d87c74871330cec4084b73f8446fc5ad';
// const String appName = 'Spicy Guitar Academy';

// // void main() => runApp(new MyApp());

// // class MyApp extends StatelessWidget {
// //   @override
// //   Widget build(BuildContext context) {
// //     return new MaterialApp(
// //       title: appName,
// //       home: new HomePage(),
// //     );
// //   }
// // }

// class Paystack extends StatefulWidget {
//   @override
//   _PaystackState createState() => _PaystackState();
// }

// class _PaystackState extends State<Paystack> {
//   final _scaffoldKey = new GlobalKey<ScaffoldState>();
//   final _formKey = GlobalKey<FormState>();
//   final _verticalSizeBox = const SizedBox(height: 20.0);
//   final _horizontalSizeBox = const SizedBox(width: 10.0);
//   var _border = new Container(
//     width: double.infinity,
//     height: 1.0,
//     color: Colors.red,
//   );
//   int _radioValue = 0;
//   CheckoutMethod _method;
//   bool _inProgress = false;
//   // String _cardNumber;
//   // String _cvv;
//   // int _expiryMonth = 0;
//   // int _expiryYear = 0;

//   @override
//   void initState() {
//     PaystackPlugin.initialize(publicKey: paystackPublicKey);
//     super.initState();
//   }

//   @override
//   Widget build(BuildContext context) {
//     return new Scaffold(
//       key: _scaffoldKey,
//       appBar: new AppBar(title: const Text(appName)),
//       body: 
//       new Container(
//         child: RaisedButton(
//           onPressed: _handleCheckout(context),
//         )
//       ),
//     );
//   }

//   void _handleRadioValueChanged(int value) =>
//       setState(() => _radioValue = value);

//   _handleCheckout(BuildContext context) async {
//     if (_method == null) {
//       _showMessage('Select checkout method first');
//       return;
//     }

//     if (_method != CheckoutMethod.card && _isLocal) {
//       _showMessage('Select server initialization method at the top');
//       return;
//     }
//     setState(() => _inProgress = true);
//     _formKey.currentState.save();
//     Charge charge = Charge()
//       ..amount = 10000 // In base currency
//       ..email = 'ebenko@us.com'
//       ..card = _getCardFromUI();

//     // if (!_isLocal) {
//       // server
//       var accessCode = _fetchAccessCodeFrmServer(_getReference());
//       charge.accessCode = accessCode;
//     // } else {
//     //   charge.reference = _getReference();
//     // }

//     try {
//       CheckoutResponse response = await PaystackPlugin.checkout(
//         context,
//         method: _method,
//         charge: charge,
//         fullscreen: false,
//         logo: MyLogo(),
//       );
//       print('Response = $response');
//       setState(() => _inProgress = false);
//       // _updateStatus(response.reference, '$response');
//     } catch (e) {
//       setState(() => _inProgress = false);
//       _showMessage("Check console for error: $e");
//       rethrow;
//     }
//   }

//   _startAfreshCharge() async {
//     _formKey.currentState.save();

//     Charge charge = Charge();
//     charge.card = _getCardFromUI();

//     setState(() => _inProgress = true);

//     if (_isLocal) {
//       // Set transaction params directly in app (note that these params
//       // are only used if an access_code is not set. In debug mode,
//       // setting them after setting an access code would throw an exception

//       charge
//         ..amount = 10000 // In base currency
//         ..email = 'ebenko@us.com'
//         ..reference = _getReference()
//         ..putCustomField('Charged From', 'Flutter SDK');
//       _chargeCard(charge);
//     } else {
//       // Perform transaction/initialize on Paystack server to get an access code
//       // documentation: https://developers.paystack.co/reference#initialize-a-transaction
//       charge.accessCode = await _fetchAccessCodeFrmServer(_getReference());
//       _chargeCard(charge);
//     }
//   }

//   _chargeCard(Charge charge) {
//     // This is called only before requesting OTP
//     // Save reference so you may send to server if error occurs with OTP
//     handleBeforeValidate(Transaction transaction) {
//       _updateStatus(transaction.reference, 'validating...');
//     }

//     handleOnError(Object e, Transaction transaction) {
//       // If an access code has expired, simply ask your server for a new one
//       // and restart the charge instead of displaying error
//       if (e is ExpiredAccessCodeException) {
//         _startAfreshCharge();
//         _chargeCard(charge);
//         return;
//       }

//       if (transaction.reference != null) {
//         _verifyOnServer(transaction.reference);
//       } else {
//         setState(() => _inProgress = false);
//         _updateStatus(transaction.reference, e.toString());
//       }
//     }

//     // This is called only after transaction is successful
//     handleOnSuccess(Transaction transaction) {
//       _verifyOnServer(transaction.reference);
//     }

//     PaystackPlugin.chargeCard(context,
//         charge: charge,
//         beforeValidate: (transaction) => handleBeforeValidate(transaction),
//         onSuccess: (transaction) => handleOnSuccess(transaction),
//         onError: (error, transaction) => handleOnError(error, transaction));
//   }

//   String _getReference() {
//     return 'SGA.N3.42431351';
//   }

//   PaymentCard _getCardFromUI() {
    
//     return PaymentCard(
//       number: '',
//       cvc: '',
//       expiryMonth: 0,
//       expiryYear: 0,
//     );
    
//   }

//   _fetchAccessCodeFrmServer(String reference) {
//     // String url = '$backendUrl/new-access-code';
//     // String accessCode;
//     // try {
//     //   print("Access code url = $url");
//     //   http.Response response = await http.get(url);
//     //   accessCode = response.body;
//     //   print('Response for access code = $accessCode');
//     // } catch (e) {
//     //   setState(() => _inProgress = false);
//     //   _updateStatus(
//     //       reference,
//     //       'There was a problem getting a new access code form'
//     //       ' the backend: $e');
//     // }

//     return "lg4tipy0jtg2qt2"; //accessCode;
//   }

//   Future _verifyOnServer(String reference) async {
//     // _updateStatus(reference, 'Verifying...');
//     String url = '$backendUrl/verify/$reference';
//     try {
//       http.Response response = await http.get(url);
//       var body = response.body;
//       _showMessage('Reference: $reference \n\ Response: $body', const Duration(seconds: 7));
//       // _updateStatus(reference, body);
//     } catch (e) {
//       _showMessage('Reference: $reference \n\ Response: $e', const Duration(seconds: 7));
//     }
//     setState(() => _inProgress = false);
//   }

//   // _updateStatus(String reference, String message) {
//   //   _showMessage('Reference: $reference \n\ Response: $message',
//   //       const Duration(seconds: 7));
//   // }

//   _showMessage(String message,
//       [Duration duration = const Duration(seconds: 4)]) {
//     _scaffoldKey.currentState.showSnackBar(new SnackBar(
//       content: new Text(message),
//       duration: duration,
//       action: new SnackBarAction(
//           label: 'CLOSE',
//           onPressed: () => _scaffoldKey.currentState.removeCurrentSnackBar()),
//     ));
//   }

//   bool get _isLocal => _radioValue == 0;
// }

// var banks = ['Selectable', 'Bank', 'Card'];

// CheckoutMethod _parseStringToMethod(String string) {
//   CheckoutMethod method = CheckoutMethod.selectable;
//   switch (string) {
//     case 'Bank':
//       method = CheckoutMethod.bank;
//       break;
//     case 'Card':
//       method = CheckoutMethod.card;
//       break;
//   }
//   return method;
// }

// class MyLogo extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return Container(
//       decoration: BoxDecoration(
//         shape: BoxShape.circle,
//         color: Colors.black,
//       ),
//       alignment: Alignment.center,
//       padding: EdgeInsets.all(10),
//       child: Text(
//         "CO",
//         style: TextStyle(
//           color: Colors.white,
//           fontSize: 13,
//           fontWeight: FontWeight.bold,
//         ),
//       ),
//     );
//   }
// }

// const Color green = const Color(0xFF3db76d);
// const Color lightBlue = const Color(0xFF34a5db);
// const Color navyBlue = const Color(0xFF031b33);